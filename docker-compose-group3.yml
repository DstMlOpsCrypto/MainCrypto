version: '3'
services:
  db:
    image: postgres:13
    container_name: db
    environment:
      POSTGRES_USER: crypto
      POSTGRES_PASSWORD: crypto
      POSTGRES_DB: cryptoDb
    restart: always
    ports:
      - "5440:5432"
    volumes:
      - crypto_data_volume:/var/lib/postgresql/data
      - ./db/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "crypto" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app_network
  mlflow_db:
    build:
      context: .
      dockerfile: ./mlflow/Dockerfile
    container_name: mlflow_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
      - POSTGRES_DB=mlflow
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "mlflow" ]
      interval: 10s # Vérifie toutes les 10 secondes
      timeout: 5s # Attente maximale pour chaque vérification
      retries: 5 # Nombre de vérifications avant de déclarer le conteneur "unhealthy"
      start_period: 30s # Temps d'attente initial avant de commencer les vérifications
    volumes:
      - mlflow:/var/lib/postgresql/data
    networks:
      - app_network
  mlflow-server:
    #image: ghcr.io/mlflow/mlflow  # image officielle MLflow
    build:
      context: .
      dockerfile: ./mlflow/Dockerfile.server
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 50s
    ports:
      - "5000:5000"
    volumes:
      - ./mlflow:/app
    depends_on:
      mlflow_db:
        condition: service_healthy # Assure que mlflow_db est healthy avant de démarrer
    working_dir: /app # Définit le répertoire de travail sur /app où le script de démarrage est localisé
    environment:
      - MLFLOW_TRACKING_URI=postgresql://mlflow:mlflow@mlflow_db:5432/mlflow
    command: [ "mlflow", "server", "--host", "0.0.0.0", "--port", "5000" ] # Exécute MLflow directement
    networks:
      - app_network
  tests-ml:
    image: tests-scripts-ml # création image tests-scripts-ml car beaucoup de dépendances à charger
    volumes:
      - ./scripts:/app/scripts
      - ./src:/app/src
      - ./tests/unit:/app/tests/units
    command: [ "pytest", "/app/tests/units" ] # Exécute les tests dans le conteneur
    networks:
      - app_network
volumes:
  crypto_data_volume:
  mlflow:
  scripts:
  src:
networks:
  app_network:
    driver: bridge
